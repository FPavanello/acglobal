# Free memory
rm(list=ls(all=TRUE)) # Removes all previously created variables
gc()                  # frees up memory resources
# Packages
library(data.table)
library(plyr)
library(dplyr)
library(FSA)
library(haven)
library(readstata13)
library(stringr)
library(tidyverse)
library(sandwich)
library(lmtest)
library(ResourceSelection)
library(multiwayvcov)
library(msm) # https://stats.oarc.ucla.edu/r/faq/how-can-i-estimate-the-standard-error-of-transformed-regression-parameters-in-r-using-the-delta-method/
library(margins)
library(texreg)
library(xtable)
library(stargazer)
library(effects)
library(survey)
library(purrr)
library(patchwork)
library(ggsci)
library(prediction)
library(reshape)
library(reshape2)
library(mob)
library(fixest)
# Set users
user <- 'fp'
#user <- 'gf'
if (user=='fp') {
stub <- 'G:/.shortcut-targets-by-id/1JhN0qxmpnYQDoWQdBhnYKzbRCVGH_WXE/'
}
if (user=='gf') {
stub <- 'H:/.shortcut-targets-by-id/1JhN0qxmpnYQDoWQdBhnYKzbRCVGH_WXE/'
}
house <- paste(stub,'6-Projections/data/household/', sep='')
graphs <- paste(stub,'6-Projections/results/graphs/Paper1/', sep='')
# Load global data
global <- readRDS(paste(house,'global.rds', sep=''))
# Interaction prices
global$mean_CDD18_db <- global$meanpy_CDD18_db
global$mean_hDD18_db <- global$meanpy_hDD18_db
global <- global %>% mutate(ln_ely_p_cdd = ln_ely_p*mean_CDD18_db,
ln_ely_p_cdd2 = ln_ely_p*(mean_CDD18_db^2),
ln_ely_p_own = ln_ely_p*as.numeric(as.character(ownership_d)),
ln_ely_p_nme = ln_ely_p*n_members,
mean_CDD18_db2 = mean_CDD18_db^2,
mean_CDD18_db_exp = ln_total_exp_usd_2011*mean_CDD18_db,
mean_CDD18_db2_exp = ln_total_exp_usd_2011*(mean_CDD18_db^2),
curr_CDD18_db2 = curr_CDD18_db^2)
# Check
global <- global[complete.cases(global$ln_ely_q), ]
global <- global[complete.cases(global$ac), ]
global <- global[complete.cases(global$ln_total_exp_usd_2011), ]
global <- global[complete.cases(global$mean_CDD18_db), ]
global <- global[complete.cases(global$urban), ]
global <- global[complete.cases(global$ownership_d), ]
global <- global[complete.cases(global$n_members), ]
global <- global[complete.cases(global$age_head), ]
global <- global[complete.cases(global$country), ]
global <- global[complete.cases(global$weight), ]
global <- global[complete.cases(global$sex_head), ]
global <- global[complete.cases(global$urban_sh), ]
global <- global[complete.cases(global$ln_ely_p), ]
global <- global[complete.cases(global$curr_CDD18_db), ]
global <- global[complete.cases(global$curr_HDD18_db), ]
global <- global %>% filter(ln_ely_q > 0)
global <- global %>% filter(weight > 0)
# Survey
global_svy <- svydesign(data = global, ids = ~ adm1, weights = ~ weight)
## Run the model
# AC formula for global
ac_formula <- as.numeric(as.character(ac)) ~ mean_CDD18_db + mean_CDD18_db2 +
mean_CDD18_db_exp + mean_CDD18_db2_exp + ln_total_exp_usd_2011 + curr_CDD18_db + curr_CDD18_db2 +
ln_ely_p + ln_ely_p_cdd + ln_ely_p_cdd2 + ln_ely_p_nme + ln_ely_p_own +
urban_sh + ownership_d +
n_members + edu_head_2 + age_head + sex_head | country
# Logistic regression
fs <- feglm(ac_formula, family = binomial(link = "logit"), data = global, weights = ~weight, cluster = c("adm1")); summary(fs)
# Save data set for which there are obs both in first and second stage
sec <- global[obs(fs),]
# Predicted probabilities
sec$phat0_obs <- as.numeric(predict(fs, type="response"))
# Find old HHs classified as owning an AC (NB: using ROC curve we have seen that we are GOOD at predicting those who have AC)
sec$ac_obs <- ifelse(sec$phat0_obs>0.5 & !is.na(sec$phat0_obs), 1, 0)
# Selection term
sec$xb_noac = 1-sec$phat0_obs
sec$selection = ifelse(sec$ac==1,
(sec$xb_noac*log(sec$xb_noac)/sec$phat0_obs) + log(sec$phat0_obs),
(sec$phat0_obs*log(sec$phat0_obs)/sec$xb_noac) + log(sec$xb_noac))
# Formula electricity expenditure for electricity expenditure
ely_formula  <- ln_ely_q ~ ac + ac*curr_CDD18_db + ac*I(curr_CDD18_db^2) +
curr_CDD18_db + I(curr_CDD18_db^2) + curr_HDD18_db + I(curr_HDD18_db^2) + ln_total_exp_usd_2011 + ln_ely_p +
urban_sh + ownership_d + n_members + edu_head_2 + age_head + sex_head + selection | country
# With selection
model <- feols(ely_formula, data = sec, weights = ~weight, cluster = c("adm1")); summary(model)
E
E
## Marginal Effect
# Dataframes for saving growth rates and SEs
AMEs_cdd <- data.frame(Var = "AME")
SEs_cdd <- data.frame(Var = "SE")
# Coeff and var-cov
vcov <- vcov(model)
betas <- coef(model)
betas
vcov
View(fs)
coeftable
fs[["coeftable"]]
